variadic extern printf(s: ptr char) -> i32;
extern atoi(s: ptr char) -> i32;
extern malloc(size: i32) -> ptr char;
extern free(ptr: ptr char) -> i32;
extern sprintf(s1: ptr char, format: ptr char, value: i32) -> i32;

fn itoa(n: i32) -> ptr char {
    let fstr : ptr char = malloc(n);
    sprintf(fstr, "%d", n);

    return fstr;
}

fn fibonacci(n : i32) -> i32 {
    if n <= 1 {
        return 1;
    }

    return fibonacci(n - 1) + fibonacci(n - 2);
}

fn main(argc: i32, argv: ptr ptr char) -> i32 {
    if argc < 2 {
        printf("Not enough arguments\n");

        return 1;
    }

    let foo : {a : {c: i32, d: bool}, b: i32};
    foo.a.c = 15;
    foo.a.d = true;
    foo.b = 778;
    printf("foo %d %d %d\n", foo.a.c, foo.a.d, foo.b);

    let fib : ptr char = itoa(fibonacci(atoi(argv[1])));
    printf("fibonacci(%s) = %s\n", argv[1], fib);
    free(fib);

    return 0;
}
